<!doctype html>

<html>
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />

	<title><%= categoryName %></title>

	<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css">
	<link rel="stylesheet" type="text/css" href="/styles/main.css" />
	<link rel="stylesheet" type="text/css" href="/styles/content.css" />
	<link rel="stylesheet" type="text/css" href="/styles/microsoft.css" />
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
</head>

<body class="category">
	<header>
		<nav>
			<input class="trigger" type="checkbox" id="hamburger" />
			<a class="github" href="https://github.com/DamSenViet/LAHacks-Improved"><img src="/icons/github.svg"/></a>
			<a class="logo" href="/">Browse</a>
			<label class="right hamburger center-parent mobile" for="hamburger">
					<div class="center">
						<div class="top bar"></div>
						<div class="middle bar"></div>
						<div class="bottom bar"></div>
					</div>
				</label>

			<div class="menu-items">
				<div class="search">
					<input type="text" list="suggestions" placeholder="Search..." />

					<datalist id="suggestions">
					</datalist>
				</div>

				<% if (!isAuthenticated) { %>
				<a class="main" href="/login"><span class="centered-text">Login</span></a>
				<a class="main" href="/signup"><span class="centered-text">Sign Up</span></a>

				<% } else { %>

				<div class="dropdown settings">
					<a class="main"><%=username %></a>
					<ul>
						<li><a class="user-icon" href="/profile/<%= username%>">Profile</a></li>
						<li><a class="logout-icon" href="/logout">Logout</a></li>
					</ul>
				</div>
				<% } %>

				<div class="dropdown categories">
					<a class="main desktop">Categories</a>
					<ul class="desktop">
						<% for (let i = 0; i < categories.length; ++i) { %>
							<li><a href="<%= '/category/'+categories[i].unmodifiedName %>"><%= categories[i].name %></a></li>
						<% } %>
					</ul>

					<div class="select-wrapper mobile">
						<select>
							<option disabled selected hidden>Categories</option>
							<% for (let i = 0; i < categories.length; ++i) { %>
								<option value="<%= '/category/'+categories[i].unmodifiedName %>"><%= categories[i].name %></option>
							<% } %>
						</select>
					</div>
				</div>

			</div>
		</nav>
	</header>

	<main class="category">
		<div class="floating-add">
			<img src="/icons/camera.svg" class="icon" />
		</div>

		<div class="close-out">
			<div class="bar"></div>
			<div class="bar"></div>
		</div>

	</main>

	<script>
		// using this limit to simulate bigger limits and logic
		var sqlResultLimit = 10;

		<% if (isAuthenticated) { %>
			var username = "<%= username%>";
		<% } %>

		function currentDateTime() {
			return new Date().toISOString().slice(0, 19).replace('T', ' ');
		}

		function whichTransitionEvent() {
			var el = document.createElement('fakeelement');
			var transitions = {
				'transition': 'transitionend',
				'OTransition': 'oTransitionEnd',
				'MozTransition': 'transitionend',
				'WebkitTransition': 'webkitTransitionEnd'
			}

			for (var t in transitions) {
				if (el.style[t] !== undefined) {
					return transitions[t];
				}
			}
			return transitions['transition'];
		}
		var transitionEnd = whichTransitionEvent();



		$('.floating-add').on('click', function() {
			setTimeout(function() {
				window.location.href = '/category/<%= unmodifiedCategoryName %>/upload';
			}, 200);
		});


		function commentReplyInputs(event) {
			// go to comement thread an add input there
			let commentReplyInput = $(this).parent().siblings('textarea.reply');
			if (commentReplyInput.length !== 0) {
				// maybe add scroll to?
				commentReplyInput.focus();
			} else {
				// add input
				let postId = $(this).parent().parent().parent().data('post-id');
				commentReplyInput = "<textarea class='reply' placeholder='Write a comment...' rows='1' data-post-id='"+postId+"'></textarea>";
				$(this).parent().parent().append(commentReplyInput);

				// gotta refind it, use after/before next time to keep reference of it
				commentReplyInput = $(this).parent().siblings('textarea.reply');
				$(commentReplyInput).focus();
			}
			attachTextAreaCommentKeys();
		};

		function attachCommentReplyInputs() {
			$('.comment-reply-button').off('click', commentReplyInputs);
			$('.comment-reply-button').on('click', commentReplyInputs);
		}


		// use this to keep track of what's been loaded
		// {postId -> {outerCommentsOffset -> offset, innerCommentsOffset -> {commentId -> offset}}}
		var commentsOffset = {};
		function loadOuterComments(event) {
			// need to keep reference for success functions
			let button = this;
			let postId = $(this).parent().parent().data('post-id');
			$.ajax({
				url: "/outer_comments",
				type: "GET",
				// need to stringify on POST, but not on GET
				data: {
					postId: postId,
					outerCommentsOffset: commentsOffset[postId].outerCommentsOffset
				},
				dataType: "json",
				success: function(res) {
					// comment structure
					// [{commentId, author, content, replies}]

					console.log(res);
					let commentsData = res.comments;

					for (let i = 0; i < commentsData.length; ++i) {
						let commentId = commentsData[i].commentId;
						let author = commentsData[i].author;
						let content = commentsData[i].content;
						let replies = commentsData[i].replies;

						commentsOffset[postId].innerCommentsOffset[commentId] = currentDateTime();

						// create comment thread conditionally
						let commentThread = [
							"<div class='comment-thread' data-comment-id='"+commentId+"' >",

							// need to add reply button to every comment
								"<div class='comment' data-comment-id='"+commentId+"' >",
									"<div class='comment-author'>",
										"<a class='username' href='/profile/"+author+"'>"+author+"</a>",
									"</div>",
									"<p class='comment-text'>",
										content,
									"</p>",
									"<span class='comment-reply-button'>Reply</span>",
								"</div>",

								// if there's at least 1 reply, add the view-replies-button
								(replies === 0)? "" : "<div class='view-replies'><span class='view-replies-button' >"+replies+" more replies</span></div>",
							"</div>"
						].join('');

						// add comment thread
						$(button).parent().before(commentThread);
					}

					attachLoadComments();
					attachCommentReplyInputs();

					let newOuterCommentsOffset = res.newOuterCommentsOffset;
					if (newOuterCommentsOffset) {
						commentsOffset[postId].outerCommentsOffset = newOuterCommentsOffset;
						console.log('outer comments time updated ' + newOuterCommentsOffset);
					}

					if (commentsData.length < sqlResultLimit){
						// this part only triggers when there's no comments left
						// remove button from dom
						$(button).parent().remove();
					}
				},
				error: function(xhr, status, error) {
					console.log("failed to load (outer) comments for postId " + $(button).data('post-id'));
				},
			});
		}
		function loadInnerComments(event) {
			// prevent double-clicking without response from server
			$(this).off('click', loadInnerComments);

			// need to keep a reference for succes in ajax
			let button = this;
			let commentId = $(this).parent().parent().data('comment-id');
			let postId = $(this).parent().parent().parent().data('post-id');
			$.ajax({
				url: "/inner_comments",
				type: "GET",
				data: {
					commentId: commentId,
					innerCommentsOffset: commentsOffset[postId].innerCommentsOffset[commentId]
				},
				dataType: "json",
				success: function(res) {

					console.log(res);
					let commentsData = res.comments;
					let newInnerCommentsOffset = res.newInnerCommentsOffset;

					for (let i = 0; i < commentsData.length; ++i) {
						let commentId = commentsData[i].commentId;
						let author = commentsData[i].author;
						let content = commentsData[i].content;

						let comment = [
							// need to add reply button to every comment
							"<div class='comment' data-comment-id='"+commentId+"' >",
								"<div class='comment-author'>",
									"<a class='username' href='/profile/"+author+"'>"+author+"</a>",
								"</div>",
								"<p class='comment-text'>",
									content,
								"</p>",
								"<span class='comment-reply-button'>Reply</span>",
							"</div>",
						].join('');

						$(button).parent().before(comment);
					}

					attachCommentReplyInputs();

					if (newInnerCommentsOffset) {
						commentsOffset[postId].innerCommentsOffset[commentId] = newInnerCommentsOffset;
						$(button).text("View more replies...");
					}

					if (commentsData.length < sqlResultLimit) {
						// only triggers when there are no more comments left
						$(button).parent().remove();
					}

				},
				error: function(xhr, status, error) {
					console.log("failed to load (inner) comments for commentId " + commentId);
				},
				complete: function(xhr, status) {
					$(button).on('click', loadInnerComments);
				}
			});
		}

		function attachLoadComments() {
			$('.view-comments-button').off('click', loadOuterComments);
			$('.view-comments-button').on('click', loadOuterComments);
			$('.view-replies-button').off('click', loadInnerComments);
			$('.view-replies-button').on('click', loadInnerComments);
		}


		function animate(card) {
			// FIRST position before transform
			// LAST position after transform
			let first;
			let last;
			if (!$(card).hasClass('active')) {
				// reset all other animation states
				$('.card').removeClass('animate final');


				if (!$(card).data('first-comment-load')) {
					$(card).find('.view-comments-button').trigger('click');
					$(card).data('first-commment-load', true);
				}

				// adding active
				first = card.getBoundingClientRect();
				$(card).addClass('active');
				$('body').addClass('active');
				last = card.getBoundingClientRect();

				// add placeholder element
				var emptyCard = "<div class='card placeholder'><div class='image-container'><div class='overlay-container'><div class='image'></div><div class='content'></div></div></div></div>"
				$(emptyCard).insertAfter(card);

			} else {
				// delete placeholder first to make sure first and last are correct
				$('.placeholder').remove();

				// removing active using image instead
				// prevents image distortion
				let image =  card.querySelector('.image');
				first = image.getBoundingClientRect();
				$(card).removeClass('active');
				$('body').removeClass('active');
				last = image.getBoundingClientRect();
			}


			// get current position and scales
			let invert = {
				// positionf
				x: first.left - last.left,
				y: first.top - last.top,
				// scales
				sx: first.width / last.width,
				sy: first.height / last.height
			};

			// transforms to the current position according to scaling
			card.style.transform = 'translate(' + invert.x + 'px, ' + invert.y + 'px) scale(' + invert.sx + ', ' + invert.sy + ')';

			// PLAY
			window.requestAnimationFrame(function() {
				card.classList.add('animate');
				// reset transform to have it move back into its proper place
				card.style.transform = "";

				// activating card, add final state in the middle of 'animate'
				if (card.classList.contains('active')) {
					card.classList.add('final');
				}

				// CLEAR, moves to desired position once animate transition ends
				card.addEventListener(transitionEnd, clearCardAnimation);
			});
		};

		// CLEAR ANIMATION PHASE
		function clearCardAnimation(event) {
			this.classList.remove('animate');
			this.removeEventListener(transitionEnd, clearCardAnimation);
		};


		function resetOriginalState() {
			let currentUrl = window.location.href;
			let urlRemovedQuery = currentUrl.split('?')[0];
			window.history.replaceState({}, "", urlRemovedQuery);
		}

		// pushing states will add the state to the history log when searching
		// need to make sure it works with a link that already has a pushState query
		resetOriginalState();

		// jquery doesn't yet support onpopstate for event handling
		// $(window).on('onpopstate', function(){
		// 	closeOutClick(null, true);
		// });

		window.onpopstate = function(event) {
			closeOutClick(null, true);
		}


		// ATTACH HANDLER WHEN NO CARDS ARE ACTIVE
		// REMOVE HANDLER WHEN ONE CARD ACTIVE
		function attachFocusToCards() {
			$('.card').off('click');
			$('.card').on('click', function(event) {
				// forcefully remove transition applied from request
				$(this).attr('style', '');
				// remove handler from all cards after clicking, continue
				$('.card').off();

				let postId = $(this).data('post-id');

				try {
					// animate the clicked card
					animate(this);
					window.history.pushState({card: postId}, "", "?postId=" + postId);

				} catch (error) {return null;}
			});
		};


		function closeOutClick(event, isWindowOnPopState) {
			let activeCard = document.querySelector('.card.active');

			// clearCardAnimation manually for high speed error correction
			// when close out is activated too fast, before clearCardAnimation activates
			// from transitionEnd, animate will stay there forever b/c it's never
			// cleared, even in consecutive calls, therefore need to manually clear transitionEnd
			try {
				activeCard.removeEventListener(transitionEnd, clearCardAnimation);
				// need this to kill left behind placeholder bug
				$('.card').removeClass('animate final');
			} catch (error) {return null;}

			// replace it
			if (!isWindowOnPopState) {
				window.history.back();
			}

			// remove final first before inducing animation
			animate(activeCard);
			attachFocusToCards();

			// remove focus from inputs inside the card
			$('.reply').blur();
		}
		$('.close-out').on('click', closeOutClick);

		$(document).on('keyup', function(event) {
			if (event.keyCode == 27) {
				$('.close-out').trigger('click');
			}
		});

		// PREVENT EVENT BUBBLING FROM TRIGGERING TRANSITION END OF PARENT ('.CARD')
		// prevents some race conditions
		function stopPropagation(event) {
			event.stopImmediatePropagation();
		}

		function attachStopTransitionEndPropagation () {
			$('.card > *').off(transitionEnd, stopPropagation);
			$('.card > *').on(transitionEnd, stopPropagation);
		};

		function textAreaAutoAdjust(event) {
			$(this).css('height', '');
			$(this).css('height', $(this).prop('scrollHeight') + 'px');
		}

		function attachTextAreaAutoAdjust() {
			$('textarea.reply').off('input', textAreaAutoAdjust);
			$('textarea.reply').on('input', textAreaAutoAdjust);
		};


		function textAreaCommentKeys(event) {
			// ctrl + enter -> newline
			if (event.ctrlKey && event.keyCode == 13) {
				event.preventDefault();
				$(this).val($(this).val()+"\n");
				$(this).trigger('input');
			}

			// enter -> send comment
			else if (event.keyCode == 13) {
				event.preventDefault();
				// keep reference inside callback functions
				let commentInput = this;
				let isReply = Boolean($(this).parent().data('comment-id'));
				$(this).prop('disabled', true);
				$.ajax({
					url: "/comment",
					type: "POST",
					data: JSON.stringify({
						comment: $(this).val().trim(),
						postId: $(this).data('post-id'),
						// might be null (reply to the post instead of a comment)
						parentCommentId: $(this).parent().data('comment-id')
					}),
					contentType: "application/json",
					dataType: "text",
					success: function(res) {
						// NOTE: could use additional animation here (expand white-space, slide in comment)
						let comment = [
							(isReply)? "": "<div class='comment-thread' data-comment-id='"+res+"'>",
								"<div class='comment' data-comment-id='"+res+"'>",
									"<div class='comment-author'>",
										"<a class='username' href='/profile/"+username+"'>"+username+"</a>",
									"</div>",
									"<p class='comment-text'>",
										$(commentInput).val().trim(),
									"</p>",
									"<span class='comment-reply-button'>Reply</span>",
								"</div>",
							(isReply)? "": "</div>"
						].join('');

						// need conditional insert
						// does this regardless of reply or not, detects whether or not its correct
						// if view-replies or view-comments exists, need to insertBefore them, else insertBefore commentInput
						if ($(commentInput).siblings('.view-comments, .view-replies').length !== 0) {
							$(commentInput).siblings('.view-comments, .view-replies').before(comment);
						} else {
							$(commentInput).before(comment);
						}
						attachCommentReplyInputs();

						// reset value of input
						$(commentInput).val("");
					},
					error: function(xhr, status, error) {
						console.log("comment for postId " + $(commentInput).data('postId') + " failed");
						console.log(xhr.responseText);
					},
					complete: function(xhr, status) {
						$(commentInput).prop('disabled', false);
					}
				});
			}
		};

		function attachTextAreaCommentKeys() {
			$('textarea.reply').off('keydown', textAreaCommentKeys);
			$('textarea.reply').on('keydown', textAreaCommentKeys);
		};


		/* ---- LIKE-BUTTON ---- */

		function disableFunctionality(event) {
			event.stopImmediatePropagation();
			event.preventDefault();
		}

		// prevent event bubbling + ensure smooth animation
		function disableLike(event) {
			event.stopImmediatePropagation();
			// disable clicking until animation has finished
			$(this).off('click', disableLike);
			$(this).off('click', disableFunctionality);
			$(this).on('click', disableFunctionality);

			// reenable like after animation completes
			// since this is a label, the input DOESN'T change checked state until after
			// this click trigger has finished running
			let resetTime = 0;
			if ($(this).siblings('.like-input').prop('checked') === true) {
				resetTime = 210
			} else if ($(this).siblings('.like-input').prop('checked') === false) {
				resetTime = 310
			}
			// built with async in mind
			// this function will work with like request; during like request, the like-input is disabled
			// even if like-button is pressed, it won't trigger the change since the input is disabled
			// once request is finished, then like-input will be able to affect like-button again while allowing
			// animation to completely finish
			let likebutton = this; // outside reference, this context lost in setTimeout
			setTimeout(function(event) {
				// renable functionality and reattach handlers
				$(likebutton).off('click', disableFunctionality);
				$(likebutton).off('click', disableLike);
				$(likebutton).on('click', disableLike);
			}, resetTime);
		}

		function attachDisableLike() {
			$('.like-button').off('click', disableLike);
			$('.like-button').on('click', disableLike);
		};


		/* ---- LIKE-INPUT ---- */

		function attachLike() {
			$('.like-input').off('click');
			$('.like-input').on('click', function(event) {
				event.stopImmediatePropagation();
			});

			$('.like-input').off('change');
			$('.like-input').on('change', function(event) {
				// need outside refernece inside ajax
				let likeInput = this;
				$(this).prop('disabled', true);
				$.ajax({
					url: "/like",
					type: "POST",
					data: JSON.stringify({
						postId: $(this).data('post-id'),
						liked: $(this).prop('checked'),
					}),
					contentType: "application/json",
					dataType: "text",
					success: function(res) {
						// do nothing
					},
					error: function(xhr, status, error) {
						console.log("like for postId " + $(likeInput).data('postId') + " failed\n"
						+ xhr.responseText + "\n"
						+ error);
						// return like state back to how it was before being clicked
						$(likeInput).prop('checked', ($(likeInput).prop('checked'))? false: true);
					},
					complete: function(xhr, status) {
						$(likeInput).prop('disabled', false);
					}
				});
			});
		};


		// need the original to start tracking comment offsets
		// cardsOffset will keep changing
		var cardsOffset = currentDateTime();
		// postId (string) -> commentOffSet
		function addCards() {
			console.log('retrieving cards...')
			// disable trigger while it's workin
			$('main').off('scroll', addCardsOnScroll);

			// gets cards, not comments
			$.ajax({
				url: "/category/<%= unmodifiedCategoryName %>/cards",
				type: "POST",
				data: JSON.stringify({cardsOffset: cardsOffset}),
				contentType: "application/json",
				dataType: 'json',
				success: function(res) {

					// success response structure (cards)
					// [{postId, postTitle, imageLink, liked, author, description}]

					console.log(res);
					let cardsData = res.cards;

					for (let i = 0; i < cardsData.length; ++i) {
						let postId = cardsData[i].postId;
						let postTitle = cardsData[i].postTitle;
						let imageLink = cardsData[i].imageLink;
						let liked = cardsData[i].liked;
						let author = cardsData[i].author;
						let description = cardsData[i].description;

						// setup
						commentsOffset[postId] = {outerCommentsOffset: currentDateTime(), innerCommentsOffset: {}};

						let card = [
							"<div class='card sliding-in' style='transition: opacity 0.3s ease-out, transform 0.4s linear, pointer-events 0s linear 0.4s;' data-post-id='"+postId+"'>",
								"<div class='image-container'>",
									"<div class='overlay-container'>",
										"<div class='image' style='background-image: url("+imageLink+")'>",
										"</div>",

										"<div class='content'>",
											"<div class='title'>",
												postTitle,
											"</div>",

											<% if (isAuthenticated) { %>
												// disable like-button for unauthenticated
											"<div class='like-wrapper'>",
												"<input id='"+postId+"' type='checkbox' class='like-input' data-post-id='"+postId+"' "+ ((liked)? "checked": "")+"/>",
												"<label for='"+postId+"' class='like-button'></label>",
											"</div>",
											<% } %>

											"<div class='author'>",
												"by <a class='author-name' href='/profile/"+author+"'>"+author+"</a>",
											"</div>",

											"<div class='description'>",
												description,
											"</div>",

											"<div class='comments' data-post-id='"+postId+"'>",

												// first animate will trigger addition of comments
												"<div class='view-comments'>",
													"<span class='view-comments-button'>View more comments...</span>",
												"</div>",

												<% if (isAuthenticated) { %>
												// disable commenting for non-authenticated users
												"<textarea class='reply' placeholder='Write a comment...' rows='1' data-post-id='"+postId+"'></textarea>",
												<% } %>
											"</div>",
										"</div>",
									"</div>",
								"</div>",
							"</div>"
						].join('');

						let element = $(card);
						$('main').append(element);
						window.setTimeout(function(){
							$(element).removeClass('sliding-in');
							// let it slide in
							window.setTimeout(function() {
								$(element).attr('style', '');
							}, 410);
						}, 200 * i);
					}

					// support animation and functionality on every card
					attachStopTransitionEndPropagation();
					attachTextAreaAutoAdjust();
					attachTextAreaCommentKeys();
					attachLike();
					attachDisableLike();
					attachLoadComments();
					attachFocusToCards();

					let newCardsOffset = res.newCardsOffset;
					if (newCardsOffset) {
						cardsOffset = newCardsOffset;
						$('main').on('scroll', addCardsOnScroll);
						$('main').trigger('scroll');
					}
				},
				error: function(xhr, status, error) {
					console.log(xhr.responseText);
				}

			});
		}

		function addCardsOnScroll (event) {
			// 10px to fix up errors
			if ($(this).scrollTop() + $(this).height() + 10 > $(this).prop('scrollHeight')) {
				addCards();
			}
		}

		$('main').on('scroll', addCardsOnScroll);
		$('main').trigger('scroll');
	</script>
	<script src="/scripts/main.js"></script>
</body>
</html>
